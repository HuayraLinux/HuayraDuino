// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.fr');

goog.require('Blockly.Msg');

Blockly.Msg.VARIABLES_DEFAULT_NAME = "élément";
Blockly.Msg.TODAY = "Aujourd'hui";
Blockly.Msg.DUPLICATE_BLOCK = "Dupliquer";
Blockly.Msg.ADD_COMMENT = "Ajouter un commentaire";
Blockly.Msg.REMOVE_COMMENT = "Supprimer un commentaire";
Blockly.Msg.EXTERNAL_INPUTS = "Entrées externes";
Blockly.Msg.INLINE_INPUTS = "Entrées en ligne";
Blockly.Msg.DELETE_BLOCK = "Supprimer le bloc";
Blockly.Msg.DELETE_X_BLOCKS = "Supprimer %1 blocs";
Blockly.Msg.DELETE_ALL_BLOCKS = "Supprimer ces %1 blocs ?";
Blockly.Msg.CLEAN_UP = "Nettoyer les blocs";
Blockly.Msg.COLLAPSE_BLOCK = "Réduire le bloc";
Blockly.Msg.COLLAPSE_ALL = "Réduire les blocs";
Blockly.Msg.EXPAND_BLOCK = "Développer le bloc";
Blockly.Msg.EXPAND_ALL = "Développer les blocs";
Blockly.Msg.DISABLE_BLOCK = "Désactiver le bloc";
Blockly.Msg.ENABLE_BLOCK = "Activer le bloc";
Blockly.Msg.HELP = "Aide";
Blockly.Msg.UNDO = "Annuler";
Blockly.Msg.REDO = "Refaire";
Blockly.Msg.CHAT = "Discutez avec votre collaborateur en tapant dans cette zone !";
Blockly.Msg.AUTH = "Veuillez autoriser cette application à permettre la sauvegarde de votre travail et à l’autoriser d'être partagé par vous.";
Blockly.Msg.ME = "Moi";
Blockly.Msg.CHANGE_VALUE_TITLE = "Modifier la valeur :";
Blockly.Msg.NEW_VARIABLE = "Nouvelle variable…";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nouveau nom de la variable :";
Blockly.Msg.RENAME_VARIABLE = "Renommer la variable…";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renommer toutes les variables « %1 » en :";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://fr.wikipedia.org/wiki/Couleur";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choisir une couleur dans la palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "couleur aléatoire";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choisir une couleur au hasard.";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_TITLE = "colorier avec";
Blockly.Msg.COLOUR_RGB_RED = "rouge";
Blockly.Msg.COLOUR_RGB_GREEN = "vert";
Blockly.Msg.COLOUR_RGB_BLUE = "bleu";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Créer une couleur avec la quantité spécifiée de rouge, vert et bleu. Les valeurs doivent être comprises entre 0 et 100.";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_TITLE = "mélanger";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "couleur 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "couleur 2";
Blockly.Msg.COLOUR_BLEND_RATIO = "taux";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mélange deux couleurs dans une proportion donnée (de 0.0 à 1.0).";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "http://fr.wikipedia.org/wiki/Boucle_for";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "répéter %1 fois";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "faire";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Exécuter des instructions plusieurs fois.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "répéter tant que";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "répéter jusqu’à";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Tant qu’une valeur est vraie, alors exécuter des instructions.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Tant qu’une valeur est fausse, alors exécuter des instructions.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Faire prendre à la variable « %1 » les valeurs depuis le nombre de début jusqu’au nombre de fin, en s’incrémentant du pas spécifié, et exécuter les instructions spécifiées.";
Blockly.Msg.CONTROLS_FOR_TITLE = "compter avec %1 de %2 à %3 par %4";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "pour chaque élément %1 dans la liste %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Pour chaque élément d’une liste, assigner la valeur de l’élément à la variable '%1', puis exécuter des instructions.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "quitter la boucle";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "passer à l’itération de boucle suivante";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Sortir de la boucle englobante.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Sauter le reste de cette boucle, et poursuivre avec l’itération suivante.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Attention : Ce bloc ne devrait être utilisé que dans une boucle.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si une valeur est vraie, alors exécuter certains ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si une valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, exécuter le second bloc d’ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres. Si aucune des valeurs n’est vraie, exécuter le dernier bloc d’ordres.";
Blockly.Msg.CONTROLS_IF_MSG_IF = "si";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "sinon si";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "sinon";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Ajouter, supprimer ou réordonner les sections pour reconfigurer ce bloc si.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Ajouter une condition au bloc si.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Ajouter une condition finale fourre-tout au bloc si.";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://fr.wikipedia.org/wiki/Inegalite_(mathematiques)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Renvoyer vrai si les deux entrées sont égales.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Renvoyer vrai si les deux entrées sont différentes.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Renvoyer vrai si la première entrée est plus petite que la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Renvoyer vrai si la première entrée est plus petite ou égale à la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Renvoyer vrai si la première entrée est plus grande que la seconde.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Renvoyer vrai si la première entrée est plus grande ou égale à la seconde.";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Renvoyer vrai si les deux entrées sont vraies.";
Blockly.Msg.LOGIC_OPERATION_AND = "et";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Renvoyer vrai si au moins une des entrées est vraie.";
Blockly.Msg.LOGIC_OPERATION_OR = "ou";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "pas %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Renvoie vrai si l’entrée est fausse. Renvoie faux si l’entrée est vraie.";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "vrai";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "faux";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Renvoie soit vrai soit faux.";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL = "nul";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Renvoie nul.";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "si vrai";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "si faux";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Vérifier la condition dans 'test'. Si elle est vraie, renvoie la valeur 'si vrai' ; sinon renvoie la valeur 'si faux'.";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://fr.wikipedia.org/wiki/Nombre";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un nombre.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://fr.wikipedia.org/wiki/Arithmetique";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Renvoie la somme des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Renvoie la différence des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Renvoie le produit des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Renvoie le quotient des deux nombres.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Renvoie le premier nombre élevé à la puissance du second.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://fr.wikipedia.org/wiki/Racine_carree";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "racine carrée";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Renvoie la racine carrée d’un nombre.";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "valeur absolue";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Renvoie la valeur absolue d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Renvoie l’opposé d’un nombre";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Renvoie le logarithme naturel d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Renvoie le logarithme base 10 d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Renvoie e à la puissance d’un nombre.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Renvoie 10 à la puissance d’un nombre.";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Renvoie le sinus d’un angle en degrés (pas en radians).";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Renvoie le cosinus d’un angle en degrés (pas en radians).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Renvoie la tangente d’un angle en degrés (pas en radians).";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Renvoie l’arcsinus d’un nombre.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Renvoie l’arccosinus d’un nombre.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Renvoie l’arctangente d’un nombre.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Renvoie une des constantes courantes : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infini).";
Blockly.Msg.MATH_IS_EVEN = "est pair";
Blockly.Msg.MATH_IS_ODD = "est impair";
Blockly.Msg.MATH_IS_PRIME = "est premier";
Blockly.Msg.MATH_IS_WHOLE = "est entier";
Blockly.Msg.MATH_IS_POSITIVE = "est positif";
Blockly.Msg.MATH_IS_NEGATIVE = "est négatif";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "est divisible par";
Blockly.Msg.MATH_IS_TOOLTIP = "Vérifier si un nombre est pair, impair, premier, entier, positif, négatif, ou s’il est divisible par un certain nombre. Renvoie vrai ou faux.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "incrémenter %1 de %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Ajouter un nombre à la variable '%1'.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arrondir un nombre au-dessus ou au-dessous.";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arrondir";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arrondir par excès";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arrondir par défaut";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "somme de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Renvoyer la somme de tous les nombres dans la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimum de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Renvoyer le plus petit nombre dans la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maximum de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Renvoyer le plus grand nombre dans la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "moyenne de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Renvoyer la moyenne (arithmétique) des valeurs numériques dans la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "médiane de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Renvoyer le nombre médian de la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "majoritaires de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Renvoyer une liste des élément(s) le(s) plus courant(s) dans la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "écart-type de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Renvoyer l’écart-type de la liste.";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "élément aléatoire de la liste";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Renvoyer un élément dans la liste au hasard.";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "reste de %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Renvoyer le reste de la division euclidienne des deux nombres.";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "contraindre %1 entre %2 et %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Contraindre un nombre à être entre les limites spécifiées (incluses).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "entier aléatoire entre %1 et %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Renvoyer un entier aléatoire entre les deux limites spécifiées, incluses.";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fraction aléatoire";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Renvoyer une fraction aléatoire entre 0.0 (inclus) et 1.0 (exclus).";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Une lettre, un mot ou une ligne de texte.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "créer un texte avec";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Créer un morceau de texte en agrégeant un nombre quelconque d’éléments.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "joindre";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Ajouter, supprimer, ou réordonner des sections pour reconfigurer ce bloc de texte.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Ajouter un élément au texte.";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "à";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "ajouter le texte";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Ajouter du texte à la variable '%1'.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "longueur de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Renvoie le nombre de lettres (espaces compris) dans le texte fourni.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 est vide";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Renvoie vrai si le texte fourni est vide.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Renvoie l’index de la première/dernière occurrence de la première chaîne dans la seconde. Renvoie 0 si la chaîne n’est pas trouvée.";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "dans le texte";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "trouver la première occurrence de la chaîne";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "trouver la dernière occurrence de la chaîne";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "dans le texte";
Blockly.Msg.TEXT_CHARAT_FROM_START = "obtenir la lettre #";
Blockly.Msg.TEXT_CHARAT_FROM_END = "obtenir la lettre # depuis la fin";
Blockly.Msg.TEXT_CHARAT_FIRST = "obtenir la première lettre";
Blockly.Msg.TEXT_CHARAT_LAST = "obtenir la dernière lettre";
Blockly.Msg.TEXT_CHARAT_RANDOM = "obtenir une lettre au hasard";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Renvoie la lettre à la position indiquée.";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Renvoie une partie indiquée du texte.";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "dans le texte";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obtenir la sous-chaîne depuis la lettre #";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obtenir la sous-chaîne depuis la lettre # depuis la fin";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obtenir la sous-chaîne depuis la première lettre";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "jusqu’à la lettre #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "jusqu’à la lettre # depuis la fin";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "jusqu’à la dernière lettre";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Renvoyer une copie du texte dans une autre casse.";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "en MAJUSCULES";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "en minuscules";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "en Majuscule Au Début De Chaque Mot";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Renvoyer une copie du texte avec les espaces supprimés d’un bout ou des deux.";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "supprimer les espaces des deux côtés";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "supprimer les espaces du côté gauche";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "supprimer les espaces du côté droit";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "afficher %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Afficher le texte, le nombre ou une autre valeur spécifié.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "invite pour un texte avec un message";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "invite pour un nombre avec un message";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Demander un nombre à l’utilisateur.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Demander un texte à l’utilisateur.";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "créer une liste vide";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Renvoyer une liste, de longueur 0, ne contenant aucun enregistrement";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Créer une liste avec un nombre quelconque d’éléments.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "créer une liste avec";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "liste";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Ajouter, supprimer, ou réordonner les sections pour reconfigurer ce bloc de liste.";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Ajouter un élément à la liste.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crée une liste consistant en la valeur fournie répétée le nombre de fois indiqué.";
Blockly.Msg.LISTS_REPEAT_TITLE = "créer une liste avec l’élément %1 répété %2 fois";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "longueur de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Renvoie la longueur d’une liste.";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 est vide";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Renvoie vrai si la liste est vide.";
Blockly.Msg.LISTS_INLIST = "dans la liste";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "trouver la première occurrence de l’élément";
Blockly.Msg.LISTS_INDEX_OF_LAST = "trouver la dernière occurrence de l’élément";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Renvoie l’index de la première/dernière occurrence de l’élément dans la liste. Renvoie 0 si l'élément n'est pas trouvé.";
Blockly.Msg.LISTS_GET_INDEX_GET = "obtenir";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obtenir et supprimer";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "supprimer";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# depuis la fin";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "premier";
Blockly.Msg.LISTS_GET_INDEX_LAST = "dernier";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aléatoire";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Renvoie l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Renvoie l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Renvoie le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Renvoie le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Renvoie un élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Supprime et renvoie l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Supprime et renvoie l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Supprime et renvoie le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Supprime et renvoie le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Supprime et renvoie un élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Supprime l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Supprime l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Supprime le premier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Supprime le dernier élément dans une liste.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Supprime un élément au hasard dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_SET = "mettre";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insérer en";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "comme";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Fixe l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Fixe l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Fixe le premier élément dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Fixe le dernier élément dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Fixe un élément au hasard dans une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Insère l’élément à la position indiquée dans une liste. #1 est le premier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Insère l’élément à la position indiquée dans une liste. #1 est le dernier élément.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Insère l’élément au début d’une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Ajouter l’élément à la fin d’une liste.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Insère l’élément au hasard dans une liste.";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obtenir la sous-liste depuis #";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obtenir la sous-liste depuis # depuis la fin";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obtenir la sous-liste depuis le début";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "jusqu’à #";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "jusqu’à # depuis la fin";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "jusqu’à la fin";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crée une copie de la partie spécifiée d’une liste.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_TITLE = "trier %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Trier une copie d’une liste.";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "croissant";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "décroissant";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numérique";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabétique";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabétique, en ignorant la casse";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "créer une liste depuis le texte";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "créer un texte depuis la liste";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "avec le séparateur";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Couper un texte en une liste de textes, en coupant à chaque séparateur.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Réunir une liste de textes en un seul, en les séparant par un séparateur.";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Renvoie la valeur de cette variable.";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Créer 'fixer %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET = "fixer %1 à %2";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Fixe cette variable pour qu’elle soit égale à la valeur de l’entrée.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Créer 'obtenir %1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "pour";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "faire quelque chose";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "avec :";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "avec :";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crée une fonction sans sortie.";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Décrire cette fonction…";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retour";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crée une fonction avec une sortie.";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "autoriser les ordres";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Attention : Cette fonction a des paramètres en double.";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "http://fr.wikipedia.org/wiki/Proc%C3%A9dure_%28informatique%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Exécuter la fonction '%1' définie par l’utilisateur.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Exécuter la fonction '%1' définie par l’utilisateur et utiliser son résultat.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entrées";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Ajouter, supprimer, ou réarranger les entrées de cette fonction.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nom de l’entrée :";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Ajouter une entrée à la fonction.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Surligner la définition de la fonction";
Blockly.Msg.PROCEDURES_CREATE_DO = "Créer '%1'";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si une valeur est vraie, alors renvoyer une seconde valeur.";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Attention : Ce bloc pourrait n’être utilisé que dans une définition de fonction.";
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_TYPE_CHAR = "Charactère";
Blockly.Msg.ARD_TYPE_TEXT = "Texte";
Blockly.Msg.ARD_TYPE_BOOL = "Booléen";
Blockly.Msg.ARD_TYPE_SHORT = "Entier court";
Blockly.Msg.ARD_TYPE_NUMBER = "Entier";
Blockly.Msg.ARD_TYPE_LONG = "Entier long";
Blockly.Msg.ARD_TYPE_DECIMAL = "Décimal";
Blockly.Msg.ARD_TYPE_ARRAY = "Tableau";
Blockly.Msg.ARD_TYPE_NULL = "Null";
Blockly.Msg.ARD_TYPE_UNDEF = "Non défini";
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "Dépendance manquante";
Blockly.Msg.ARD_HIGH = "HAUT";
Blockly.Msg.ARD_LOW = "BAS";
Blockly.Msg.ARD_ANALOGREAD = "Lecture du signal analogique #";
Blockly.Msg.ARD_ANALOGREAD_PULLUP = "Lecture via pull up du signal analogique #";
Blockly.Msg.ARD_ANALOGREAD_TIP = "Valeur de retour entre 0 et 1024";
Blockly.Msg.ARD_ANALOGWRITE = "Ecriture du signal analogique #";
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Ecrit une valeur analogique comprise entre 0 et 255 sur un port PWM spécifique";
Blockly.Msg.ARD_HIGHLOW_TIP = " Configuration d'un signal à l'état HAUT ou BAS";
Blockly.Msg.ARD_DIGITALREAD = "Lecture du signal numérique #";
Blockly.Msg.ARD_DIGITALREAD_TIP = "Lecture de la valeur d'un signal numérique: HAUT ou BAS";
Blockly.Msg.ARD_DIGITALWRITE = "Configuration du signal numérique #";
Blockly.Msg.ARD_WRITE_TO = "à";
Blockly.Msg.ARD_DIGITALWRITE_TIP = " Ecriture de la valeur HAUT ou BAS du signal numérique #";
Blockly.Msg.ARD_BUILTIN_LED = "Configurer la DEL";
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Allumer ou éteindre la DEL de la carte";
Blockly.Msg.ARD_DEFINE = "Définir";
Blockly.Msg.ARD_TONE_PIN = "Signal de tonalité #";
Blockly.Msg.ARD_TONE_FREQ = "frequence";
Blockly.Msg.ARD_TONE_PIN_TIP = "Génération de tonalité (son)sur un signal";
Blockly.Msg.ARD_NOTONE_PIN = "PAS de Signal de tonalité #";
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Arret de la génération de tonalité (son)sur un signal";
Blockly.Msg.ARD_MAP = "Converti";
Blockly.Msg.ARD_MAP_VAL = "valeur de [0-";
Blockly.Msg.ARD_MAP_TIP = "Converti un nombre de la plage [0-1024].";
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino exécute en premier:";
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino boucle infinie:";
Blockly.Msg.ARD_FUN_RUN_TIP = "Definition de la configuration de l'Arduino: fonctions setup() et loop().";
Blockly.Msg.ARD_PIN_WARN1 = "Signal %1 est utilisé pour %2 alors que signal %3. Déjà utilisé en tant que %4.";
Blockly.Msg.ARD_SERIAL_SETUP = "Configuration";
Blockly.Msg.ARD_SERIAL_SPEED = ":  vitesse";
Blockly.Msg.ARD_SERIAL_BPS = "bps";
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Choisir la vitesse d'un périphérique série";
Blockly.Msg.ARD_SERIAL_PRINT = "imprimer";
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "ajouter une nouvelle ligne";
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Imprime les données sur la console série en texte lisible ASCII.";
Blockly.Msg.ARD_SERIAL_AVAILABLE = "available to read";
Blockly.Msg.ARD_SERIAL_AVAILABLE_TIP = "Returns true if the number of bytes available to read is great zero.";
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "Un bloc de configuration pour %1 doit être ajouté à l'espace de travail afin d'utiliser ce bloc!";
Blockly.Msg.ARD_SERIAL_READ = "Read";
Blockly.Msg.ARD_SERIAL_READ_TIP = "Reads a char for a specific Serial peripheral";
Blockly.Msg.ARD_SERVO_WRITE = "Configurer SERVO sur Patte";
Blockly.Msg.ARD_SERVO_WRITE_TO = "vers";
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrés (0~180)";
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Configurer un SERVO à un angle donné";
Blockly.Msg.ARD_SERVO_READ = "Lecture du signal# du SERVO";
Blockly.Msg.ARD_SERVO_READ_TIP = "Lecture d'un angle du SERVO";
Blockly.Msg.ARD_SPI_SETUP = "Configuration";
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "décalage de données";
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "Division de fréquence";
Blockly.Msg.ARD_SPI_SETUP_MODE = "mode SPI  (idle - edge)";
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Bas - Descendant)";
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Bas - Montant)";
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (Haut - Descendant)";
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (Haut - Montant)";
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configuration du périphérique SPI.";
Blockly.Msg.ARD_SPI_TRANS_NONE = "vide";
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfert";
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "vers le signal esclave";
Blockly.Msg.ARD_SPI_TRANS_TIP = "Envoie d'un message SPI à un esclave précis.";
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "Un bloc de configuration pour %1 doit être ajouté à l'espace de travail afin d'utiliser ce bloc!";
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "L'ancienne valeur du signal %1 n'est plus disponible.";
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Envoie d'un message SPI à un esclave précis et recuperation de la donnée.";
Blockly.Msg.ARD_STEPPER_SETUP = "Configuration";
Blockly.Msg.ARD_STEPPER_MOTOR = "Moteur pas-à-pas:";
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";
Blockly.Msg.ARD_STEPPER_PIN1 = "signal1 #";
Blockly.Msg.ARD_STEPPER_PIN2 = "signal2 #";
Blockly.Msg.ARD_STEPPER_PIN3 = "signal3 #";
Blockly.Msg.ARD_STEPPER_PIN4 = "signal4 #";
Blockly.Msg.ARD_STEPPER_REVOLVS = "Combien de pas par tour";
Blockly.Msg.ARD_STEPPER_SPEED = "Configuration de la vitesse(rpm) à";
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configuration d'un moteur pas-à-pas: signaux et autres paramètres.";
Blockly.Msg.ARD_STEPPER_STEP = "Déplacement grace au moteur pas-à-pas";
Blockly.Msg.ARD_STEPPER_STEPS = "pas";
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Configurer le moteur pas-à-pas avec un nombre précis de pas.";
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_MEGAPI_STEPPER_SETUP = "Configuration";
Blockly.Msg.ARD_MEGAPI_STEPPER_MOTOR = "Moteur pas-à-pas MegaPi:";
Blockly.Msg.ARD_MEGAPI_STEPPER_DEFAULT_NAME = "MyMegaPiStepper";  // untranslated
Blockly.Msg.ARD_MEGAPI_STEPPER_SLOT = "slot #";
Blockly.Msg.ARD_MEGAPI_STEPPER_REVOLVS = "Combien de pas par tour";
Blockly.Msg.ARD_MEGAPI_STEPPER_SPEED = "Configuration de la vitesse(rpm) à";
Blockly.Msg.ARD_MEGAPI_STEPPER_ACCELERATION = "Configuration de la accélération à";
Blockly.Msg.ARD_MEGAPI_STEPPER_SETUP_TIP = "Configuration d'un moteur pas-à-pas MegaPi: signaux et autres paramètres.";
Blockly.Msg.ARD_MEGAPI_STEPPER_STEP = "Déplacement grace au moteur pas-à-pas MegaPi";
Blockly.Msg.ARD_MEGAPI_STEPPER_STEP_TO = "Déplacement a grace au moteur pas-à-pas MegaPi";
Blockly.Msg.ARD_MEGAPI_STEPPER_STEPS_TO = "pas à";
Blockly.Msg.ARD_MEGAPI_STEPPER_STEPS = "pas";
Blockly.Msg.ARD_MEGAPI_STEPPER_RUN = "exécuter MegaPi stepper";
Blockly.Msg.ARD_MEGAPI_STEPPER_RUN_TIP = "exécuter les instructions de MegaPi stepper ";
Blockly.Msg.ARD_MEGAPI_STEPPER_STEP_TIP = "Configurer le moteur pas-à-pas MegaPiavec un nombre précis de pas.";
Blockly.Msg.ARD_MEGAPI_STEPPER_COMPONENT = "MegaPi stepper";  // untranslated
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_SETUP = "Setup MegaPi line follower:";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_DEFAULT_NAME = "MyMegaPiLineFollower";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_PORT = "port#";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_SETUP_TIP = "Configures a MegaPi line follower pinout and other settings.";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR = "Read MegaPi line follower sensors";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR_TIP = "Reads a number for a specific MegaPi line follower peripheral";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR_INFO_1 = "S1_IN_S2_IN   = 0x00    sensor1 and sensor2 are both inside of black line ";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR_INFO_2 = "S1_IN_S2_OUT  = 0x01    sensor1 is inside of black line and sensor2 is outside of black line";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR_INFO_3 = "S1_OUT_S2_IN  = 0x02    sensor1 is outside of black line and sensor2 is inside of black line";
Blockly.Msg.ARD_MEGAPI_LINE_FOLLOWER_READ_SENSOR_INFO_4 = "S1_OUT_S2_OUT = 0x03    sensor1 and sensor2 are both outside of black line";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_SETUP = "Setup MegaPi ultrasonic:";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_DEFAULT_NAME = "MyMegaPiUltrasonic";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_PORT = "port#";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_SETUP_TIP = "Configures a MegaPi ultrasonic pinout and other settings.";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_DISTANCE = "Distance in Cm MegaPi ultrasonic sensor";
Blockly.Msg.ARD_MEGAPI_ULTRASONIC_DISTANCE_TIP = "Reads a distance to an obstacle in cm for a MegaPi ultrasonic sensor";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_SETUP = "Setup MegaPi DC Motor";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_DEFAULT_NAME = "MyMegaPiDCMotor";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_PORT = "port#";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_SPEED = "set speed (rpm) to";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_SETUP_TIP = "Configures a MegaPi DC Motor pinout and other settings.";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_RUN = "run MegaPi DC Motor";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_RUN_TIP = "Runs MegaPi DC Motor at especific speed";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_STOP = "stop MegaPi DC Motor";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_STOP_TIP = "Stops the MegaPi DC Motor.";
Blockly.Msg.ARD_MEGAPI_DC_MOTOR_COMPONENT = "MegaPi DC Motor";
Blockly.Msg.ARD_MEGAPI_GYRO_SETUP = "Setup MegaPi Gyro:";
Blockly.Msg.ARD_MEGAPI_GYRO_DEFAULT_NAME = "MyMegaPiGyro";
Blockly.Msg.ARD_MEGAPI_GYRO_SETUP_TIP = "Configures a MegaPi Gyro.";
Blockly.Msg.ARD_MEGAPI_GYRO_READ_ANGLEX = "Read MegaPi Gyro angle X";
Blockly.Msg.ARD_MEGAPI_GYRO_READ_ANGLEY = "Read MegaPi Gyro angle Y";
Blockly.Msg.ARD_MEGAPI_GYRO_READ_ANGLEZ = "Read MegaPi Gyro angle Z";
Blockly.Msg.ARD_MEGAPI_GYRO_READ_ANGLE_AXIS_TIP = "Reads the angle value of the x/y/z axis for a specific MegaPi Gyro peripheral";
Blockly.Msg.ARD_MEGAPI_ENCODER_INIT = "Init MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_INIT_TIP = "Initializes all configurations of MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETUP = "Setup MegaPi Encoder: ";
Blockly.Msg.ARD_MEGAPI_ENCODER_DEFAULT_NAME = "MyMegaPiEncoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_MOTOR = "MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SLOT = "Slot#";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETUP_TIP = "Configures a MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETTARPWM = "Set PWM Tar MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETTARPWM_TIP = "Sets a PWM Tar function of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPULSE = "Set Pulse MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPULSE_TIP = "Sets the pulse of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_COMPONENT = "MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETMOTORPWM = "Set PWM MegaPi Encoder ";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETMOTORPWM_TIP = "Sets the PWM of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETRATIO = "Set Ratio MegaPi Encoder ";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETRATIO_TIP = "Sets the Ratio of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPOSPID = "Set Pos PID of MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPOSPID_P = "Pos PID P";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPOSPID_I = "Pos PID I";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPOSPID_D = "Pos PID D";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETPOSPID_TIP = "Sets the Position PID and parameters of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETSPEEDPID = "Set Speed PID of MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETSPEEDPID_P = "Speed PID P";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETSPEEDPID_I = "Speed PID I";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETSPEEDPID_D = "Speed PID D";
Blockly.Msg.ARD_MEGAPI_ENCODER_SETSPEEDPID_TIP = "Sets the Speed PID and parameters of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_RUNSPEED = "Run at Speed MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_RUNSPEED_TIP = "Runs at especific Speed";
Blockly.Msg.ARD_MEGAPI_ENCODER_MOVETO = "Move To MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_MOVETO_POS = "Move To Position";
Blockly.Msg.ARD_MEGAPI_ENCODER_MOVETO_SPEED = "Move at Speed";
Blockly.Msg.ARD_MEGAPI_ENCODER_MOVETO_TIP = "Moves To a position and speed of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_GETCURPOS = "Get Position MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_GETCURPOS_TIP = "Gets the current position of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_GETCURRENTSPEED = "Get Speed MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_GETCURRENTSPEED_TIP = "Gets the current speed of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_UPDATESPEED = "Update Speed MegaPi Encoder";
Blockly.Msg.ARD_MEGAPI_ENCODER_UPDATESPEED_TIP = "Updates the previous set speed of MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_GO_STRAIGHT = "Set Speed MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_GO_STRAIGHT_SPEED = "Set Speed";
Blockly.Msg.ARD_MEGAPI_ENCODER_FOR_BACK = "Set direction";
Blockly.Msg.ARD_MEGAPI_ENCODER_GO_STRAIGHT_TIP = "Sets the Speed to go for MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_FORWARD = "Forward";
Blockly.Msg.ARD_MEGAPI_ENCODER_BACKWARD = "Backward";
Blockly.Msg.ARD_MEGAPI_ENCODER_LEFT = "Left";
Blockly.Msg.ARD_MEGAPI_ENCODER_RIGHT = "Right";
Blockly.Msg.ARD_MEGAPI_ENCODER_SPIN = "Set turn to MegaPi Encoder Motor";
Blockly.Msg.ARD_MEGAPI_ENCODER_SPIN_TIME = "turn wait in milliseconds";
Blockly.Msg.ARD_MEGAPI_ENCODER_SPIN_DIR = "direction";
Blockly.Msg.ARD_MEGAPI_ENCODER_SPIN_TIP = "Sets turn direction to go for MegaPi Encoder Motor";
Blockly.Msg.ARD_DS18B20_SETUP = "Config Sensor type DS18B20";  // untranslated
Blockly.Msg.ARD_DS18B20_DEFAULT_NAME = "ds_1";  // untranslated
Blockly.Msg.ARD_DS18B20_PIN = "Pin";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_1 = "direccion_1#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_2 = "direccion_2#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_3 = "direccion_3#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_4 = "direccion_4#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_5 = "direccion_5#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_6 = "direccion_6#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS_7 = "direccion_7#";  // untranslated
Blockly.Msg.ARD_DS18B20_ADDRESS = "direccion de memoria";  // untranslated
Blockly.Msg.ARD_DS18B20_TEMPERATURE_C = "Leer Temperatura en °C de DS18B20 ";  // untranslated
Blockly.Msg.ARD_DS18B20_TEMPERATURE_F = "Leer Temperatura en °F de DS18B20 ";  // untranslated
Blockly.Msg.ARD_DS18B20_COMPONENT = "DS18B20";  // untranslated
Blockly.Msg.ARD_LCD_I2C_SETUP = "Config LCD I2C";
Blockly.Msg.ARD_LCD_I2C_DEFAULT_NAME = "lcd";
Blockly.Msg.ARD_LCD_I2C_SETCURSOR = "Set position col, row LCD I2C";
Blockly.Msg.ARD_LCD_I2C_SETCURSOR_COL = "col";
Blockly.Msg.ARD_LCD_I2C_SETCURSOR_ROW = "row";
Blockly.Msg.ARD_LCD_I2C_SETCURSOR_TIP = "Sets the position in cols and rows to LCD I2C";
Blockly.Msg.ARD_LCD_I2C_PRINT = "print";
Blockly.Msg.ARD_LCD_I2C_COMPONENT = "LCD I2C";
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "Délai d'attente de";
Blockly.Msg.ARD_TIME_MS = "millisecondes";
Blockly.Msg.ARD_TIME_DELAY_TIP = "Attendre un délai précis en millisecondes";
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microsecondes";
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Attendre un délai précis en microsecondes";
Blockly.Msg.ARD_TIME_MILLIS = "Temps écoulé (millisecondes)";
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Renvoie le temps en milliseconds depuis le lancement de ce programme sur la carte Arduino. Doit être stocké dans un Entier long positif";
Blockly.Msg.ARD_TIME_MICROS = "Temps écoulé (microsecondes)";
Blockly.Msg.ARD_TIME_MICROS_TIP = "Renvoie le temps en microseconds depuis le lancement de ce programme sur la carte Arduino. Doit être stocké dans un Entier long positif";
Blockly.Msg.ARD_TIME_INF = "Attente sans fin (fin du programme)";
Blockly.Msg.ARD_TIME_INF_TIP = "Attente indéfinie, arrêt du programme.";
Blockly.Msg.ARD_VAR_AS = "comme";
Blockly.Msg.ARD_VAR_AS_TIP = "Configure une valeur à un type précis";
Blockly.Msg.ARD_PULSE_READ = "mesure %1 impulsion sur le signal #%2";
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "mesure %1 impulsion sur le signal #%2 (délai de retard %3 μs)";
Blockly.Msg.ARD_PULSE_TIP = "Mesure la durée d'une pulsation sur le signal selectioné.";
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Mesure la durée d'une pulsation sur le signal selectioné, dans le delai imparti";
Blockly.Msg.ARD_SETTONE = "Définir une tonalité sur le signal #";
Blockly.Msg.ARD_TONEFREQ = "à la frequence";
Blockly.Msg.ARD_TONE_TIP = " Configurer le signal de tonalité dans la plage: 31 - 65535";
Blockly.Msg.ARD_TONE_WARNING = "La fréquence doit être dans la plage 31 - 65535";
Blockly.Msg.ARD_NOTONE = "Eteindre la tonalité du signal #";
Blockly.Msg.ARD_NOTONE_TIP = "Eteindre / Activer la tonalité du signal selectioné";
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
